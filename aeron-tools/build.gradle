import org.gradle.plugins.ide.eclipse.model.Classpath

/*
 * Copyright 2015 Kaazing Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'

defaultTasks 'clean', 'build', 'install'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
        classpath 'com.puppycrawl.tools:checkstyle:6.7'
    }
}

project(':aeron-tools') {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'shadow'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver'), project(':aeron-samples')
        compile 'commons-cli:commons-cli:1.2'
    }

    shadow {
        outputFile = new File('aeron-tools/build/libs/tools.jar')
    }

    task stats(type:JavaExec) {
        main = 'uk.co.real_logic.aeron.tools.StatsDriver'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties(System.properties);
        if (project.hasProperty('myargs')) {
            args(myargs.split(','))
        }
    }

    task ping(type:JavaExec) {
        main = 'uk.co.real_logic.aeron.tools.perf_tools.AeronPing'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties(System.properties);
        if (project.hasProperty('myargs')) {
            args(myargs.split(','))
        }
    }

    task pong(type:JavaExec) {
        main = 'uk.co.real_logic.aeron.tools.perf_tools.AeronPong'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties(System.properties);
        if (project.hasProperty('myargs')) {
            args(myargs.split(','))
        }
    }

    task latencyUnderLoadPub(type:JavaExec) {
        main = 'uk.co.real_logic.aeron.tools.perf_tools.AeronLatencyUnderLoadPublisher'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties(System.properties);
        if (project.hasProperty('myargs')) {
            args(myargs.split(','))
        }
    }

    task latencyUnderLoadSub(type:JavaExec) {
        main = 'uk.co.real_logic.aeron.tools.perf_tools.AeronLatencyUnderLoadSubscriber'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties(System.properties);
        if (project.hasProperty('myargs')) {
            args(myargs.split(','))
        }
    }

    build.doLast {
      tasks.shadowJar.execute()
    }
}
